import os
import ast
from pathlib import Path
from typing import List, Set

def is_function_exportable(name: str, file_path: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"""
    # –ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ
    if name.startswith('_'):
        return False
    
    # –ù–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∞–º–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if file_path.name == 'generate_init.py':
        return False
    
    return True

def extract_exportable_functions(file_path: Path) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤"""
    functions = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ
        class_names = set()
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef):
                class_names.add(node.name)
        
        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è –º–µ—Ç–æ–¥–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤
        for node in ast.walk(tree):
            # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            if isinstance(node, ast.FunctionDef):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
                current = node
                is_method = False
                while hasattr(current, 'parent') and current.parent:
                    if isinstance(current.parent, ast.ClassDef):
                        is_method = True
                        break
                    current = current.parent
                
                if not is_method and is_function_exportable(node.name, file_path):
                    functions.append(node.name)
            
            # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            elif isinstance(node, ast.Assign):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–Ω–µ –≤ –∫–ª–∞—Å—Å–µ)
                current = node
                is_in_class = False
                while hasattr(current, 'parent') and current.parent:
                    if isinstance(current.parent, ast.ClassDef):
                        is_in_class = True
                        break
                    current = current.parent
                
                if not is_in_class:
                    for target in node.targets:
                        if isinstance(target, ast.Name) and is_function_exportable(target.name, file_path):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è (lambda –∏–ª–∏ –≤—ã–∑–æ–≤)
                            if isinstance(node.value, (ast.Lambda, ast.Call)):
                                functions.append(target.name)
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
    
    return functions

def generate_init_with_functions(package_root: str = ".") -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç __init__.py —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ __all__"""
    
    imports = []
    all_functions: Set[str] = set()
    module_functions = {}
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk(package_root):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if '__pycache__' in root or any(x in root for x in ['.git', '.vscode', '__pycache__']):
            continue
            
        for file in files:
            if file.endswith('.py') and file not in ['__init__.py', 'generate_init.py']:
                file_path = Path(root) / file
                relative_path = file_path.relative_to(package_root)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
                import_parts = list(relative_path.parts)
                import_parts[-1] = import_parts[-1][:-3]  # –£–±–∏—Ä–∞–µ–º .py
                module_path = '.'.join(import_parts)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
                functions = extract_exportable_functions(file_path)
                
                if functions:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
                    functions.sort()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
                    imports.append(f"from .{module_path} import {', '.join(functions)}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ __all__
                    all_functions.update(functions)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    module_functions[module_path] = functions
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    imports.sort()
    sorted_functions = sorted(all_functions)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    content = '''"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª __init__
"""

'''

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    content += '\n'.join(imports)
    content += '\n\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º __all__
    content += '__all__ = [\n'
    for func in sorted_functions:
        content += f'    "{func}",\n'
    content += ']\n'
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    init_path = Path(package_root) / "__init__.py"
    with open(init_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {init_path}")
    print(f"üì¶ –ú–æ–¥—É–ª–µ–π: {len(imports)}")
    print(f"üöÄ –§—É–Ω–∫—Ü–∏–π: {len(sorted_functions)}")
    print("\nüìã –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    for module, funcs in sorted(module_functions.items()):
        print(f"   {module}: {', '.join(funcs)}")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    generate_init_with_functions(".")